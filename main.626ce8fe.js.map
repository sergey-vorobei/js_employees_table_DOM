{"version":3,"sources":["scripts/main.js"],"names":["checkColumn","root","document","querySelector","tHead","tBody","asc","ascSort","rowCollection","targetIndex","type","Array","from","sort","a","b","cellA","normalize","cells","innerText","cellB","isNaN","localeCompare","descSort","value","parseInt","replace","Number","toLocaleString","appendElement","table","el","append","addEventListener","evt","title","target","idx","cellIndex","rows","forEach","rowEl","targetEl","row","classList","contains","remove","parentNode","add","form","createElement","valitadeInput","input","name","length","Error","onAddRow","e","preventDefault","data","FormData","nameInput","get","positionInput","officeInput","ageInput","salaryInput","newSalary","inputs","insertAdjacentHTML","pushNotification","reset","setAttribute","error","message","getBoundingClientRect","bottom","right","width","container","style","cssText","description","querySelectorAll","setTimeout","checkCellInput","cell","prev","innerHTML","cellPrevValue","cloneNode","getComputedStyle","onblur","focus","key","blur"],"mappings":"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","file":"main.626ce8fe.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst root = document.querySelector('body');\nconst tHead = document.querySelector('thead');\nconst tBody = document.querySelector('tbody');\n\nlet asc = true;\nlet checkColumn;\n\nfunction ascSort(rowCollection, targetIndex, type) {\n  asc = true;\n\n  return Array.from(rowCollection).sort((a, b) => {\n    const cellA = normalize(type, a.cells[targetIndex].innerText);\n    const cellB = normalize(type, b.cells[targetIndex].innerText);\n\n    return isNaN(cellA)\n      ? cellA.localeCompare(cellB)\n      : cellA - cellB;\n  });\n}\n\nfunction descSort(rowCollection, targetIndex, type) {\n  asc = false;\n\n  return Array.from(rowCollection).sort((a, b) => {\n    const cellA = normalize(type, a.cells[targetIndex].innerText);\n    const cellB = normalize(type, b.cells[targetIndex].innerText);\n\n    return isNaN(cellA)\n      ? cellB.localeCompare(cellA)\n      : cellB - cellA;\n  });\n}\n\nfunction normalize(type, value) {\n  if (type !== 'Salary' && type !== 'salary') {\n    return value;\n  }\n\n  return isNaN(parseInt(value))\n    ? parseInt(value.replace(/[$,]/g, ''))\n    : '$' + Number(value).toLocaleString('en-US');\n}\n\nfunction appendElement(table, el) {\n  table.append(el);\n}\n\n// Sort table\ntHead.addEventListener('click', (evt) => {\n  const title = evt.target;\n  const idx = title.cellIndex;\n  const type = title.innerText;\n\n  if (checkColumn === idx && asc) {\n    return descSort(tBody.rows, idx, type).forEach(rowEl => {\n      appendElement(tBody, rowEl);\n    });\n  }\n\n  return ascSort(tBody.rows, idx, type).forEach(rowEl => {\n    appendElement(tBody, rowEl);\n    checkColumn = idx;\n  });\n});\n\n// Add class active to rows\ntBody.addEventListener('click', (evt) => {\n  const targetEl = evt.target;\n\n  Array.from(tBody.rows).forEach(row => row.classList.contains('active')\n    ? row.classList.remove('active')\n    : targetEl.parentNode.classList.add('active'));\n});\n\n// Add Form on page\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\nform.setAttribute('method', 'get');\n\nform.insertAdjacentHTML('afterbegin', `\n    <label for=\"name\">\n      Name:\n      <input\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        data-qa=\"name\"\n      >\n    </label>\n\n    <label for=\"position\">\n      Position:\n      <input\n        id=\"position\"\n        name=\"position\"\n        type=\"text\"\n        data-qa=\"position\"\n      >\n    </label>\n\n    <label for=\"office\">\n      Office:\n      <select\n        id=\"office\"\n        name=\"office\"\n        data-qa=\"office\"\n      >\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n\n    <label for=\"age\">\n      Age:\n      <input\n        id=\"age\"\n        type=\"number\"\n        name=\"age\"\n        data-qa=\"age\"\n      >\n    </label>\n\n    <label for=\"salary\">\n      Salary:\n      <input\n        id=\"salary\"\n        type=\"number\"\n        name=\"salary\"\n        data-qa=\"salary\"\n      >\n    </label>\n\n    <button id=\"submit\" type=\"submit\">Save to table</button>\n`);\nroot.append(form);\n\n// Add data from form in table\nfunction valitadeInput(input) {\n  if (input.name === 'name' && input.value.length < 4) {\n    throw new Error('Name can not be less than 4 letters');\n  }\n\n  if (input.name === 'position' && input.value.length <= 0) {\n    throw new Error('Please enter position name.');\n  }\n\n  if (input.name === 'age' && (input.value < 18 || input.value > 90)) {\n    throw new Error('Please, enter a valid age.');\n  }\n}\n\nfunction onAddRow(e) {\n  e.preventDefault();\n\n  const data = new FormData(form);\n  const nameInput = data.get('name');\n  const positionInput = data.get('position');\n  const officeInput = data.get('office');\n  const ageInput = data.get('age');\n  const salaryInput = data.get('salary');\n  const newSalary = '$' + Number(salaryInput).toLocaleString('en-US');\n\n  inputs.forEach(input => valitadeInput(input));\n\n  const row = document.createElement('tr');\n\n  row.insertAdjacentHTML('afterbegin', `\n      <td>${nameInput}</td>\n      <td>${positionInput}</td>\n      <td>${officeInput}</td>\n      <td>${ageInput}</td>\n      <td>${newSalary}</td>\n  `);\n\n  tBody.append(row);\n\n  pushNotification('Success',\n    'Employee was added to the table', 'success');\n\n  form.reset();\n}\n\nform.addEventListener('submit', (evt) => {\n  try {\n    onAddRow(evt);\n  } catch (error) {\n    pushNotification('Error', error.message, 'error');\n  }\n});\n\n// Notification\nconst { bottom, right, width } = form.getBoundingClientRect();\n\nconst container = document.createElement('div');\n\ncontainer.style.cssText = `\n  position: absolute;\n  top: ${bottom + 24}px;\n  left: ${right - width}px;\n  display: grid;\n  gap: 24px;\n`;\nroot.append(container);\n\nconst pushNotification = (title, description, type) => {\n  container.insertAdjacentHTML('beforeend', `\n    <div\n      class=\"notification ${type}\"\n      data-qa=\"notification\"\n      style=\"position: static\"\n    >\n      <h2 class=\"title\">${title}</h2>\n\n      <p>${description}</p>\n    </div>\n  `);\n\n  const notification = document.querySelectorAll('.notification');\n\n  notification.forEach(el => {\n    setTimeout(() => el.remove(), 10000);\n  });\n};\n\n// Edit cell on dblclick\nconst inputs = form.querySelectorAll('input, select');\n\nfunction checkCellInput(input, cell, prev) {\n  input.value.length <= 0\n    ? cell.innerHTML = prev\n    : cell.innerHTML = normalize(input.name, input.value);\n}\n\ntBody.addEventListener('dblclick', (e) => {\n  const cell = e.target;\n  const cellPrevValue = cell.innerHTML;\n  const input = inputs[cell.cellIndex].cloneNode(true);\n\n  input.style.width = `${parseInt(getComputedStyle(cell).width)}px`;\n  input.classList.add('cell-input');\n  input.value = normalize(input.name, cell.innerHTML);\n  cell.innerHTML = '';\n  cell.append(input);\n\n  input.onblur = function() {\n    try {\n      valitadeInput(input);\n      checkCellInput(input, cell, cellPrevValue);\n\n      pushNotification('Success',\n        'Employee was added to the table', 'success');\n    } catch (error) {\n      input.focus();\n      pushNotification('Error', error.message, 'error');\n    }\n  };\n\n  input.addEventListener('keydown', (evt) => {\n    if (evt.key === 'Enter') {\n      input.blur();\n    }\n  });\n});\n"]}